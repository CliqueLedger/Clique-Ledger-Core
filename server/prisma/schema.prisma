generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    String   @id
  user_name  String
  mail       String   @unique
  phone_no   String?
  created_at DateTime @default(now())
  members    Member[]
}

model Transaction {
  transaction_id   String   @id
  amount           Float
  description      String
  sender_id        String
  clique_id        String
  transaction_type String
  is_verified      String   @default("not_verified")
  done_at          DateTime @default(now())
  spend            Spend[]
  sender           Member   @relation("Sender", fields: [sender_id], references: [member_id], onDelete: Cascade)
  clique           Clique   @relation(fields: [clique_id], references: [clique_id], onDelete: Cascade)
}

model Spend {
  transaction_id String
  member_id      String
  amount         Float
  transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id], onDelete: Cascade)
  member         Member      @relation(fields: [member_id], references: [member_id], onDelete: Cascade)

  @@id([transaction_id, member_id])
}

model Clique {
  clique_id    String        @id
  clique_name  String
  created_at   DateTime      @default(now())
  is_fund      Boolean
  fund         Float         @default(0)
  is_active    Boolean       @default(true)
  members      Member[]
  transactions Transaction[]
  ledger       Ledger[]
  Media        Media[]
}

model Member {
  member_id    String        @id
  user_id      String
  clique_id    String
  is_active    Boolean       @default(true)
  is_admin     Boolean
  joined_at    DateTime
  user         User          @relation(fields: [user_id], references: [user_id])
  clique       Clique        @relation(fields: [clique_id], references: [clique_id], onDelete: Cascade)
  spends       Spend[]
  ledger       Ledger[]
  transactions Transaction[] @relation("Sender")
  media        Media[]
}

model Ledger {
  member_id String
  clique_id String
  amount    Float
  is_due    Boolean
  member    Member  @relation(fields: [member_id], references: [member_id], onDelete: Cascade)
  clique    Clique  @relation(fields: [clique_id], references: [clique_id], onDelete: Cascade)

  @@id([member_id])
}

model Media {
  media_id   String   @id
  clique_id  String
  file_url   String
  created_at DateTime @default(now())
  media_type String
  sender_id  String

  clique Clique @relation(fields: [clique_id], references: [clique_id], onDelete: Cascade)
  member Member @relation(fields: [sender_id], references: [member_id], onDelete: Cascade)
}